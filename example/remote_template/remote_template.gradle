repositories {
    // configure a repository containing Rocker templates
    exclusiveContent {
        forRepository {
            // define a layout that holds templates in a given folder versioned in a GitHub repository
            ivy {
                url = 'https://raw.githubusercontent.com/etiennestuder/gradle-rocker-plugin/'
                patternLayout { artifact 'v[revision]/example/kotlin/src/rocker/[ext].rocker.html' }
                metadataSources { artifact() }
            }
        }

        // only match artifacts for group:artifact nu.studer.rocker:templates
        // for example, nu.studer.rocker:templates:{version}@{template-name}
        filter { includeModule 'nu.studer.rocker', 'templates' }
    }

    // resolve all other dependencies as usual
    mavenCentral()
}

// create a new configuration to hold the remote templates
configurations {
    rockerTemplates
}

// add the desired templates to the configuration
dependencies {
    rockerTemplates 'nu.studer.rocker:templates:3.0.4@Hello'
}

// copy resolved templates to a dedicated location within the project
def copyRockerTemplates = tasks.register('copyRockerTemplates', CopyRockerTemplates) {
    files = configurations.rockerTemplates
    targetDir = layout.buildDirectory.dir('rocker/templates')
}

// configure Rocker to process the templates
rocker {
    configurations {
        main {
            optimize = true
            templateDir = copyRockerTemplates.flatMap(t -> t.targetDir)
            outputDir = project.layout.buildDirectory.dir('generated/sources/rocker')
        }
    }
}

abstract class CopyRockerTemplates extends DefaultTask {

    @InputFiles
    abstract Property<FileCollection> getFiles()

    @OutputDirectory
    abstract DirectoryProperty getTargetDir()

    @Inject
    abstract FileSystemOperations getFileSystemOperations()

    @TaskAction
    copyFiles() {
        fileSystemOperations.copy { spec ->
            from files
            into targetDir
            rename { 'Hello.rocker.html' }
        }
    }

}