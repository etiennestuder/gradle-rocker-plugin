repositories {
    // configure a repository containing Rocker templates
    exclusiveContent {
        forRepository {
            // define a layout that holds templates in a given folder versioned in a GitHub repository
            ivy {
                url = 'https://raw.githubusercontent.com/etiennestuder/gradle-rocker-plugin/'
                patternLayout { artifact 'v[revision]/example/kotlin/src/rocker/[ext].rocker.html' }
                metadataSources { artifact() }
            }
        }

        // only match artifacts for group:artifact nu.studer.rocker:templates
        // for example, nu.studer.rocker:templates:{version}@{template-name}
        filter { includeModule 'nu.studer.rocker', 'templates' }
    }

    // resolve all other dependencies as usual
    mavenCentral()
}

// create a new configuration to hold the remote templates
configurations {
    rockerTemplate
}

dependencies {
    // places the resolved artifact at '$GRADLE_HOME/caches/modules-2/files-2.1/nu.studer.rocker/templates/3.0.4'
    rockerTemplate 'nu.studer.rocker:templates:3.0.4@Hello'
}

// copy resolved dependency to known directory
def copyRockerDestination = project.layout.buildDirectory.dir('rocker/templates')
def copyRocker = tasks.register('copyRocker', Copy) {
    from(configurations.rockerTemplate)
    into(copyRockerDestination)

    // this determines the name of the generated class
    rename { 'Hello.rocker.html' }
}

// Configure Rocker using destination directory of copyRocker
rocker {
    configurations {
        main {
            optimize = true
            templateDir = copyRockerDestination
            outputDir = project.layout.buildDirectory.dir('generated/sources/rocker')
        }
    }
}

// Copy template files before compiling
tasks.named('compileRocker').configure {
    dependsOn(copyRocker)
}
